import React, { useState, useRef } from 'react';
import './css/test.css';
import f3Image from '../../assets/f3.png';

/**
 * TestDemo Component - TOEIC Fill-in-Blank Demo Interface
 * M·ª•c ƒë√≠ch: T·∫°o giao di·ªán demo cho b√†i test TOEIC v·ªõi ch·ª©c nƒÉng ƒëi·ªÅn t·ª´ v√†o ch·ªó tr·ªëng
 * Route: /test-demo
 */
const TestDemo = () => {
  // === AUDIO STATE ===
  // Tr·∫°ng th√°i ph√°t audio (true = ƒëang ph√°t, false = d·ª´ng)
  const [isPlaying, setIsPlaying] = useState(false);
  // Tr·∫°ng th√°i nghe l·∫°i (ƒë·ªÉ hi·ªÉn th·ªã "ƒêang ph√°t..." button)
  const [isListening, setIsListening] = useState(false);
  
  // === QUESTION STATE ===
  // C√¢u tr·∫£ l·ªùi c·ªßa user (pre-filled v·ªõi 'playing' ƒë·ªÉ demo)
  const [userAnswer, setUserAnswer] = useState('playing');
  // Feedback sau khi check ƒë√°p √°n: {isCorrect: boolean, message: string}
  const [feedback, setFeedback] = useState(null);
  
  // === NAVIGATION STATE ===
  // C√¢u h·ªèi hi·ªán t·∫°i (1-based indexing)
  const [currentQuestion, setCurrentQuestion] = useState(1);
  // T·ªïng s·ªë c√¢u h·ªèi (c·ªë ƒë·ªãnh 30 cho demo)
  const [totalQuestions] = useState(30);
  
  // === REF ===
  // Reference t·ªõi audio element (ƒë·ªÉ control playback)
  const audioRef = useRef(null);

  // === AUDIO HANDLERS ===
  /**
   * X·ª≠ l√Ω play/pause audio
   * Logic: Toggle tr·∫°ng th√°i ph√°t, simulate audio playback 2 gi√¢y
   */
  const handlePlayAudio = () => {
    setIsPlaying(!isPlaying);
    
    if (!isPlaying) {
      // Simulate audio playback duration: 2 seconds
      setTimeout(() => {
        setIsPlaying(false);
      }, 2000);
    }
  };

  /**
   * X·ª≠ l√Ω nghe l·∫°i audio
   * Logic: Set c·∫£ isListening v√† isPlaying, t·ª± ƒë·ªông t·∫Øt sau 2 gi√¢y
   * Hi·ªÉn th·ªã "ƒêang ph√°t..." trong l√∫c ch·ªù
   */
  const handleListenAgain = () => {
    setIsListening(true);
    setIsPlaying(true);
    
    // Simulate audio replay duration: 2 seconds
    setTimeout(() => {
      setIsListening(false);
      setIsPlaying(false);
    }, 2000);
  };

  // === ANSWER VALIDATION ===
  /**
   * Ki·ªÉm tra ƒë√°p √°n c·ªßa user
   * Logic: So s√°nh v·ªõi ƒë√°p √°n ƒë√∫ng 'playing' (case-insensitive)
   * Set feedback v·ªõi k·∫øt qu·∫£ v√† message t∆∞∆°ng ·ª©ng
   */
  const handleCheckAnswer = () => {
    const correctAnswer = 'playing'; // ƒê√°p √°n chu·∫©n
    const isCorrect = userAnswer.toLowerCase().includes(correctAnswer.toLowerCase());
    
    setFeedback({
      isCorrect,
      message: isCorrect 
        ? 'Ch√≠nh x√°c! The woman is playing a piano.'
        : 'Ch∆∞a ƒë√∫ng. H√£y nghe l·∫°i v√† quan s√°t h√¨nh ·∫£nh.'
    });
  };

  // === NAVIGATION HANDLERS ===  
  /**
   * Chuy·ªÉn v·ªÅ c√¢u h·ªèi tr∆∞·ªõc
   * Logic: Ch·ªâ cho ph√©p n·∫øu kh√¥ng ph·∫£i c√¢u ƒë·∫ßu ti√™n (currentQuestion > 1)
   * Reset to√†n b·ªô state c·ªßa c√¢u h·ªèi khi chuy·ªÉn
   */
  const handlePrevQuestion = () => {
    if (currentQuestion > 1) {
      setCurrentQuestion(currentQuestion - 1);
      resetQuestion();
    }
  };

  /**
   * Chuy·ªÉn t·ªõi c√¢u h·ªèi ti·∫øp theo  
   * Logic: Ch·ªâ cho ph√©p n·∫øu ch∆∞a ph·∫£i c√¢u cu·ªëi (currentQuestion < totalQuestions)
   * Reset to√†n b·ªô state c·ªßa c√¢u h·ªèi khi chuy·ªÉn
   */
  const handleNextQuestion = () => {
    if (currentQuestion < totalQuestions) {
      setCurrentQuestion(currentQuestion + 1);
      resetQuestion();
    }
  };

  /**
   * Reset to√†n b·ªô state c·ªßa c√¢u h·ªèi
   * ƒê∆∞·ª£c g·ªçi khi: chuy·ªÉn c√¢u h·ªèi (prev/next)
   * Logic: Clear user answer, feedback, v√† audio states
   */
  const resetQuestion = () => {
    setUserAnswer('');       // Clear input
    setFeedback(null);       // Clear feedback message
    setIsPlaying(false);     // Stop audio
    setIsListening(false);   // Reset listening state
  };

  // === INPUT HANDLERS ===
  /**
   * X·ª≠ l√Ω thay ƒë·ªïi input c·ªßa user
   * Logic: Update userAnswer v√† clear feedback n·∫øu ƒëang hi·ªÉn th·ªã
   * (Cho ph√©p user th·ª≠ l·∫°i sau khi nh·∫≠n feedback)
   */
  const handleInputChange = (e) => {
    setUserAnswer(e.target.value);
    // Reset feedback khi user thay ƒë·ªïi answer ƒë·ªÉ th·ª≠ l·∫°i
    if (feedback) {
      setFeedback(null);
    }
  };

  // === RENDER ===
  return (
    <div style={{ 
      margin: 0, 
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
      background: '#f5f5f5',
      minHeight: '100vh'
    }}>
      {/* === NAVIGATION HEADER === */}
      {/* Hi·ªÉn th·ªã ti√™u ƒë·ªÅ b√†i test v√† ƒëi·ªÅu khi·ªÉn chuy·ªÉn c√¢u */}
      <div className="test-nav-header">
        <h1 className="test-nav-title">[DAY 1] PART 1 TRANH M·ªòT NG∆Ø·ªúI</h1>
        <div className="test-nav-controls">
          {/* Button C√ÇU TR∆Ø·ªöC - disabled n·∫øu ƒëang ·ªü c√¢u ƒë·∫ßu ti√™n */}
          <button 
            className={`test-nav-btn prev ${currentQuestion === 1 ? 'disabled' : ''}`}
            onClick={handlePrevQuestion}
            disabled={currentQuestion === 1}
          >
            ‚Üê C√ÇU TR∆Ø·ªöC
          </button>
          
          {/* Button C√ÇU TI·∫æP - disabled n·∫øu ƒëang ·ªü c√¢u cu·ªëi */}
          <button 
            className={`test-nav-btn next ${currentQuestion === totalQuestions ? 'disabled' : ''}`}
            onClick={handleNextQuestion}
            disabled={currentQuestion === totalQuestions}
          >
            C√ÇU TI·∫æP ‚Üí
          </button>
          
          {/* Counter hi·ªÉn th·ªã v·ªã tr√≠ c√¢u h·ªèi hi·ªán t·∫°i */}
          <div className="test-counter">{currentQuestion}/{totalQuestions}</div>
        </div>
      </div>

      {/* === MAIN LAYOUT (2 COLUMNS) === */}
      <div className="test-main-layout">
        {/* === LEFT PANEL - QUESTION CONTENT === */}
        <div className="test-question-panel">
          <div className="question-content">
            {/* Lo·∫°i c√¢u h·ªèi: Listen & Fill */}
            <div className="question-type">Listen & Fill</div>

            {/* === AUDIO PLAYER === */}
            {/* Custom audio player v·ªõi play/pause, progress bar, volume */}
            <div className="audio-player-container">
              <div className="custom-audio-player">
                <div className="audio-controls">
                  {/* Play/Pause Button - disabled khi ƒëang listen again */}
                  <button 
                    className="audio-play-btn"
                    onClick={handlePlayAudio}
                    disabled={isListening}
                  >
                    {isPlaying ? '‚è∏' : '‚ñ∂'}
                  </button>
                  
                  {/* Audio duration display (fixed 0:02 for demo) */}
                  <span className="audio-time">0:02 / 0:02</span>
                  
                  {/* Progress bar - animated width based on isPlaying state */}
                  <div className="audio-progress">
                    <div 
                      className="audio-progress-bar" 
                      style={{ 
                        width: isPlaying ? '100%' : '0%',   // Full width when playing
                        transition: 'width 2s linear'      // Smooth 2s animation
                      }}
                    />
                  </div>
                  
                  {/* Volume controls (decorative) */}
                  <div className="audio-volume">
                    <button className="volume-btn">üîä</button>
                    <button className="volume-btn">‚ãØ</button>
                  </div>
                </div>
              </div>
            </div>

            {/* === QUESTION IMAGE === */}
            {/* H√¨nh ·∫£nh minh h·ªça cho c√¢u h·ªèi: Woman playing piano */}
            <div className="question-image">
              <img 
                src={f3Image} 
                alt="Woman playing piano" 
                style={{ maxWidth: '400px', height: 'auto' }}
              />
            </div>

            {/* === FILL IN THE BLANK === */}
            {/* C√¢u h·ªèi ƒëi·ªÅn t·ª´ v√†o ch·ªó tr·ªëng v·ªõi input field */}
            <div className="fill-blank-container">
              <div className="fill-blank-text">
                The woman is{' '}
                {/* Input field v·ªõi dynamic styling based on feedback */}
                <input 
                  type="text" 
                  className={`fill-blank-input ${
                    feedback?.isCorrect ? 'correct' :           // Green border if correct
                    feedback && !feedback.isCorrect ? 'incorrect' : ''  // Red border if incorrect
                  }`}
                  placeholder="..."
                  value={userAnswer}
                  onChange={handleInputChange}
                />
                {' '}a piano.
              </div>
              
              {/* Conditional feedback message - ch·ªâ hi·ªÉn th·ªã khi c√≥ feedback */}
              {feedback && (
                <div 
                  className={`feedback-message ${feedback.isCorrect ? 'correct' : 'incorrect'}`}
                  style={{ display: 'block' }}
                >
                  {feedback.message}
                </div>
              )}
            </div>

            {/* === HELPER TAGS === */}
            {/* C√°c g·ª£i √Ω v√† h∆∞·ªõng d·∫´n cho user */}
            <div className="helper-tags">
              <span className="helper-tag hint">
                Ph·ª©c: Qua ·ªü tr·ªëng ‚Üí Ki·∫øm tra ‚Üí C√¢u m·ªõi
              </span>
              <span className="helper-tag pronunciation">
                C·∫ßn: ƒêi·ªÅu khi·ªÉn √¢m thanh
              </span>
              <span className="helper-tag">
                L∆∞u √Ω: N·∫øu sai, ki·ªÉm tra b·ªô g√µ ti·∫øng Vi·ªát
              </span>
            </div>
          </div>

          {/* === ACTION BUTTONS === */}
          {/* C√°c button ch√≠nh ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi b√†i test */}
          <div className="question-actions">
            {/* Button KI·ªÇM TRA - disabled n·∫øu input tr·ªëng */}
            <button 
              className="action-btn check"
              onClick={handleCheckAnswer}
              disabled={!userAnswer.trim()}  // Disable if input is empty/whitespace
            >
              Ki·ªÉm tra
            </button>
            
            {/* Button NGHE L·∫†I - disabled khi ƒëang ph√°t audio */}
            <button 
              className="action-btn listen"
              onClick={handleListenAgain}
              disabled={isPlaying}  // Disable during audio playback
            >
              {isListening ? 'ƒêang ph√°t...' : 'Nghe l·∫°i'}  {/* Dynamic text */}
            </button>
            
            {/* Button C√ÇU TI·∫æP - disabled n·∫øu ƒëang ·ªü c√¢u cu·ªëi */}
            <button 
              className="action-btn next"
              onClick={handleNextQuestion}
              disabled={currentQuestion === totalQuestions}  // Disable at last question
            >
              C√¢u ti·∫øp
            </button>
          </div>
        </div>

        {/* === RIGHT PANEL - HELP SECTION === */}
        {/* Panel b√™n ph·∫£i ch·ª©a c√°c th√¥ng tin h·ªó tr·ª£ h·ªçc t·∫≠p */}
        <div className="test-help-panel">
          
          {/* === PRONUNCIATION SECTION === */}
          {/* H∆∞·ªõng d·∫´n ph√°t √¢m t·ª´ kh√≥a */}
          <div className="help-section">
            <div className="help-title">Pronunciation:</div>
            <div className="help-content">
              <div className="pronunciation-text">
                /Ààple…™…™≈ã/ - playing  {/* IPA notation for correct pronunciation */}
              </div>
            </div>
          </div>

          {/* === TRANSLATION SECTION === */}
          {/* D·ªãch nghƒ©a c√¢u v√† t·ª´ kh√≥a */}
          <div className="help-section">
            <div className="help-title">D·ªãch nghƒ©a:</div>
            <div className="help-content">
              <div className="translation-text">
                The woman is <strong>playing</strong> a piano.<br />
                <em>Ng∆∞·ªùi ph·ª• n·ªØ ƒëang ch∆°i piano.</em>  {/* Vietnamese translation */}
              </div>
            </div>
          </div>

          {/* === STUDY NOTES SECTION === */}
          {/* Ghi ch√∫ v√† tips h·ªçc t·∫≠p */}
          <div className="help-section">
            <div className="help-title">Ghi ch√∫:</div>
            <div className="help-content">
              ‚Ä¢ Nghe k·ªπ ƒë·ªông t·ª´ trong c√¢u<br />
              ‚Ä¢ Ch√∫ √Ω th√¨ hi·ªán t·∫°i ti·∫øp di·ªÖn<br />
              ‚Ä¢ Quan s√°t h√†nh ƒë·ªông trong h√¨nh
            </div>
          </div>
        </div>
      </div>

      {/* === HIDDEN AUDIO ELEMENT === */}
      {/* Audio element th·ª±c t·∫ø ƒë·ªÉ ph√°t file √¢m thanh (hidden) */}
      <audio ref={audioRef} preload="auto">
        <source src="/path/to/audio.mp3" type="audio/mpeg" />
        Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ph√°t audio.
      </audio>
    </div>
  );
};

export default TestDemo;

/**
 * === COMPONENT SUMMARY ===
 * 
 * TestDemo Component - Interactive TOEIC Fill-in-Blank Demo Interface
 * 
 * KEY FEATURES:
 * 1. Audio Player: Play/pause with animated progress bar
 * 2. Fill-in-Blank: Input field with real-time validation
 * 3. Navigation: Previous/Next question with counter (1/30)
 * 4. Feedback System: Instant validation with correct/incorrect messages
 * 5. Help Panel: Pronunciation, translation, and study notes
 * 
 * MAIN LOGIC FLOW:
 * 1. User clicks play audio ‚Üí Audio simulates 2s playback
 * 2. User types answer in input field ‚Üí Real-time state update
 * 3. User clicks "Ki·ªÉm tra" ‚Üí Validates against "playing"
 * 4. System shows feedback ‚Üí Green/red styling + message
 * 5. User can navigate questions ‚Üí Resets all states
 * 
 * STATE MANAGEMENT:
 * - Audio: isPlaying, isListening
 * - Question: userAnswer, feedback
 * - Navigation: currentQuestion, totalQuestions
 * 
 * ROUTES:
 * - Access via: /test-demo
 * - Called from: /test (landing page)
 */